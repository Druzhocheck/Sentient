import telebot
from telebot import types
from news import news_prompt
from model import chat, generate_response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot("8042449400:AAGFepJ5TMj2RHEWIGe41W3iUFLAgTk8Kcc")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π News
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    news_button = types.KeyboardButton("News")
    markup.row(news_button)
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å emoji –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    WELCOME_MESSAGE = f"""
    ‚ú® <b>üåü Dear {message.from_user.first_name} {message.from_user.last_name} üåü</b> ‚ú®

    üéä <i>Welcome to our amazing Telegram bot!</i> üéä

    üìö Here you'll discover:
    ‚Ä¢ The <b>freshest news</b> from Crypto world üåç
    ‚Ä¢ <b>Curated content</b> tailored just for you ‚ú®
    ‚Ä¢ <b>Daily updates</b> to keep you informed üìÜ

    üî• <b>Hot features:</b>
    - Instant news notifications üîî
    - Personalized news feed üóûÔ∏è
    - Trending stories analysis üìä

    üëá <b>Get started now!</b> üëá
    Press the <b>[ üåü News ]</b> button below to explore today's top stories!

    üí° <i>Stay informed</i>.

    ‚ù§Ô∏è We're thrilled to have you with us! ‚ù§Ô∏è
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        WELCOME_MESSAGE,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "News":
        show_categories(message)
    else:
        bot.send_message(message.chat.id, chat(message.text))

def show_categories(message):
    markup = types.InlineKeyboardMarkup()
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å callback_data
    btn1 = types.InlineKeyboardButton("Vulnerabilities", callback_data="vulnerabilities")
    btn2 = types.InlineKeyboardButton("Hacking", callback_data="hacking")
    btn3 = types.InlineKeyboardButton("Laws", callback_data="laws")
    btn4 = types.InlineKeyboardButton("Investments and Funds", callback_data="investments")
    btn5 = types.InlineKeyboardButton("Mainnet", callback_data="mainnet")
    btn6 = types.InlineKeyboardButton("Airdrop", callback_data="airdrop")
    btn7 = types.InlineKeyboardButton("Mass Layoffs", callback_data="layoffs")
    btn8 = types.InlineKeyboardButton("Mergers", callback_data="mergers")
    btn9 = types.InlineKeyboardButton("Technica Innovations", callback_data="innovations")
    btn10 = types.InlineKeyboardButton("My category", callback_data="custom_category")
    btn_back = types.InlineKeyboardButton("Back", callback_data="back")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º
    markup.row(btn1)
    markup.row(btn2, btn3)
    markup.row(btn4, btn5)
    markup.row(btn6, btn7)
    markup.row(btn8, btn9)
    markup.row(btn10)
    markup.row(btn_back)
    
    bot.send_message(
        message.chat.id,
        "Choose category or enter yours",
        reply_markup=markup
    )

def go_back_to_main_menu(call):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "back":
        pass
    elif call.data == "innovations":
        model_answer = generate_response(news_prompt("innovations"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "hacking":
        model_answer = generate_response(news_prompt("hacking"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "laws":
        model_answer = generate_response(news_prompt("laws"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "investments":
        model_answer = chat(news_prompt("investments"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "mainnet":
        model_answer = generate_response(news_prompt("mainnet"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "mergers":
        model_answer = generate_response(news_prompt("mergers"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "airdrop":
        model_answer = generate_response(news_prompt("airdrop"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "layoffs":
        model_answer = generate_response(news_prompt("layoffs"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "vulnerabilities":
        model_answer = generate_response(news_prompt("vulnerabilities"))
        bot.send_message(
            call.message.chat.id,
            model_answer,
        )
    elif call.data == "custom_category":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        msg = bot.send_message(
            call.message.chat.id,
            "Write down what kind of news you would like to recive."
        )
        bot.register_next_step_handler(msg, process_custom_category, call)

def process_custom_category(message, call):
    bot.send_message(
        message.chat.id,
        {message.text}
        #f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
    )
    #show_categories(message)
    go_back_to_main_menu(call)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()